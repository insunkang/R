#R 에서 사용하는 주석문
num = 100 #num이 100이다.
num
num <- 1000
num
num==1000
num==100
num!=1000
num>100
num<100
test < - "myR"
test
test < - myR
myR < - num
myR < - num
test < -myR
test < - "myR"
test
myR < - num
test <- "myR"
test
test <- myR
myR <- num
test <-myR
test
fdasfsdafdsafdsa
result <-
result <- 100
result1 <- 100
resutl1
result1 <- 100
resutl1
resutl1
result1
result2 <- "test"
result2
result2 <- "test" #"문자형"
result2
#R에서 제공되는 함수를 이용할 수 있으며
#class함수는
class(result1)
class(result2)
test <- as.character(result1)
test
class(test)
test <- as.numeric(result1)
test
class(test)
# = , <- 같은 것 처럼 보이지만 <- 를 이용해서 변수에 데이터를 할당
a = 100
b <-  100
a
b
sqrt(9)
sqrt(x=9)
x
sqrt(x <- 9)
x
? c
myvector <- c
myvector <- c
myvector <- c
myvector <- c
myvector <- c
myvector <- c(100,200,300)
myvector
myvector[1]
myvector[2]
myvector[3]
myvector1
myvector1[1]
myvector1[2]
myvector1[3]
myvector2 <- c(10,20,30)
myvector1 <- c(100,200,300)
myvector1
myvector1[1]
myvector1[2]
myvector1[3]
myvector2 <- c(10,20,30)
myvector1
myvector2 <- c(10,20,30
)
myvector2[1]
myvector2 <- c(10,20,30
myvector2 <- c(10,20,30
myvector2 <- c(10,20,30
source('C:/iot/work/RWork/Vector.R', encoding = 'UTF-8')
myvector2 <- c(10,20,30)
myvector1
myvector2
myvector1 + 20
myvector1 + 2
mytest <- c("java","R","hadoop","android")
mytext <- c("java","R","hadoop","android")
mytext[1]
mytext[1,2]
mytext[c(1,2)] #벡터의 1번요소와 2번요소만 출력
mytext[c(1,2)] #벡터의 1번요소와 2번요소만 출력
mytext[c(1,3)]
mytext[c(1:3)]
1:3
1:100
mytext[-1] #1번요소 제외한 나머지
mytext[c(-1,-3)]
mytext[c(-1:-3)]
mytext[-c(1:3)]
#TRUE 와 FALSE를 이용해서 작업하기
mytext[c(T,T,F,F)]
numlist <- 1:100
numlist
numlist %%2==0 #%%가 나머지 구하기
numlist[numlist %%2==0] #짝수 구하기
numlist[numlist %%1==0] #홀수 구하기
numlist2 <- seq(1,10)
numlist2
numlist2 <- seq(1,10,)
?seq
numlist2
numlist2 <- seq(1,10,by=2)
numlist2
v1 <- c(70,80,90,100)
names(v1) #
v1
names(v1) <- c("국어","수학","영어","자바")
v1
length(v1)
mean(v1)
max(v1)
min(v1) #최솟값
#행렬
matrix(1:15)
? matrix
mymat1 <- matrix(1:15,ncol = 3)
mymat1
mymat1 <- matrix(1:15,ncol = 3,byrow = t)
mymat1 <- matrix(1:15,ncol = 3,byrow = T)
mymat1
#matrix에서 원하는 값을 추출하기
mymat1[2,2]
mymat1[3,3]
mymat1[1,c(1:3)]
mymat1[1,c(1:4)]
mymat1[1,]
mymat1[,1] #1열열의 모든것 출력
mymat1[,1] #1열의 모든것 출력
#1행과 3행을 뺀 데이터
mymat1[2,]
#1행과 3행만 출력
mymat[-2,]
#1행과 3행만 출력
mymat1[-2,]
#1행과 3행을 뺀 데이터
mymat1[2,]
mymat1
#1행과 3행을 뺀 데이터
mymat1[-c(1,3),]
#1행과 3행만 출력
mymat1[c(1,3),]
#미니실습1 - 2행부터 4행까지 출력(단, 2번 3번 컬럼만)
mymat1[c(2:4),c(2,3)]
cbind(mymat1,c(1,11,111,1111))
addmymat1 <- cbind(mymat1,c(1,11,111,1111))
addmymat1
addmymat2 <- rbind(mymat2,c(1,11))
addmymat2 <- rbind(mymat1,c(1,11))
addmymat2
addmymat2 <- rbind(mymat1,c(1,11,111,1111))
addmymat2
colnames(mymat1) <- c("a","b","c")
mymay1
mymat1
rownames(mymat1) <- c("r1","r2","r3","r4","r5")
mymat1
mean(mymat1)
m1 <- matrix(80, 90, 70, 100, 80, 99, 78, 72,90, 78, 82, 78, 99, 89, 78, 90, byrow = T)
a <- c(80, 90, 70, 100, 80, 99, 78, 72,90, 78, 82, 78, 99, 89, 78, 90)
m1 <- matrix(a, byrow = T)
m1
m1 <- matrix(a,ncol=3, byrow = T)
m1 <- matrix(a,ncol=4, byrow = T)
m1
avg_name <- mean(m1[c(1,)])
avg_name <- mean(m1[c(1,1:4)])
avg_name
colnames(m1) <- c("국어","영어","과학","수학")
rownames(m1) <- c("kim","lee","hong","jang")
m1
avg_name <- mean(m1[c(1:4,1:4)])
avg_name
avg_name <- mean(m1[c(1:4),c(1)])
avg_name
avg_name <- mean(m1[c(c(1:4),c(1))])
avg_name
avg_name <- mean(m1[c(1:4,1)])
avg_name
avg_name <- mean(m1[c(1,1:4)])
avg_name
avg_name <- mean(m1[c(1,)])
avg_name <- mean(m1[1,)])
avg_name <- mean(m1[1,])
avg_name
avg_name <- matrix(mean(m1[1,]),mean(m1[2,]),mean(m1[3,]))
avg_name <- matrix(mean(m1[1,]),mean(m1[2,]),mean(m1[3,]),mean(m1[4,]))
avg_name
b <- c(mean(m1[1,]),mean(m1[2,]),mean(m1[3,]),mean(m1[4,]))
b
avg_name <- matrix(b)
avg_name
avg_name <- matrix(b,byrow = 4)
avg_name
avg_name <- matrix(b,bycol = 4)
avg_name
avg_name <- matrix(b,byrow = T)
avg_name
avg_name <- matrix(b,byrow = F)
avg_name
#1부터 15까지의 값을 3개의 열로 표현, row방향으로 값을 추가
mymat1 <- matrix(1:15,ncol = 3,byrow = T)
mymat1
mymat1 <- matrix(1:15,ncol = 3) #3열로 표시
mymat1
avg_name <- matrix(b)
avg_name
b <- c(mean(m1[1,]),mean(m1[2,]),mean(m1[3,]),mean(m1[4,]))
b
b <- c(mean(m1[1,]),mean(m1[2,]),mean(m1[3,]),mean(m1[4,]))
b
c <- c(mean(m1[,1]),mean(m1[,2]),mean(m1[,3]),mean(m1[,4]))
c
colnames(m1) <- c("국어","영어","과학","수학")
rownames(m1) <- c("kim","lee","hong","jang")
m1
avg_name <- mean(m1[c(1,1:4)])
avg_name
b <- c(mean(m1[1,]),mean(m1[2,]),mean(m1[3,]),mean(m1[4,]))
b
c <- c(mean(m1[,1]),mean(m1[,2]),mean(m1[,3]),mean(m1[,4]))
c
dataframe <- matrix(1:15, ncol = 3, byrow = T)
dataframe
dataframeMat1 <- matrix(1:15, ncol = 3, byrow = T)
dataframeMat1
dataframeMat2 <- data.frame
dataframeMat2
dataframeMat2 <- data.frame()
dataframeMat2
dataframeMat2 <- data.frame(dataframeMat1)
dataframeMat2
mydataframeMat2 <- data.frame(dataframeMat1)
mydataframeMat2
mydataframe
mydataframe <- data.frame(dataframeMat1)
mydataframe
dataframeMat1 <- matrix(1:15, ncol = 3, byrow = T)
dataframeMat1
mydataframe <- data.frame(dataframeMat1)
mydataframe
dataframeMat1[,1]
mydataframeMat2[,1]
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
as.character(dataframeMat1[,1])
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
data.frameMat1[,1] <-  as.character(dataframeMat1[,1])
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
dataframeMat1[,1] <-  as.character(dataframeMat1[,1])
dataframeMat1
#str함수는 dataframe내부의 데이터형을 볼 수 있는 함수
str(mydataframe)
str(dataframeMat1)
mydataframe[,1] <-  as.character(mydataframe[,1])
str(mydataframe)
dataframeMat1
mydataframe
mydataframe$X2
mydataframe$X3
mydataframe$X1 #$를 이용해서 열의 이름을 접근할 수 있다.
#dataframe에 열을 추가가
col4 <- c(1,1,1,1,1)
col4
mydataframe$X4 <- col4
mydataframe
#필요한 곳에서 dataframe을 다시 matrix로 변환
dataframeMat2 <- as.matrix(mydataframe)
datafra
dataframeMat2
#dataframe만들기 - 1. matrix를 dataframe으로 변환
#2. 벡터를 여러개 만들어서 dataframe을 작성
eng <- c(100,99,90)
math <- c(100,99,90)
mydf1 <- data.frame(eng,math)
mydf1
mean(mydf1$eng)
mean(mydf1$math)
#3.dataframe을 직접 정의하는 방법법
mydf2 <- data.frame(eng=c(100,100,100),
m =c(90,90,90))
mydf2
m <- matrix(1:15,ncol = 3,byrow = T)
m
t(m)
?t
d <- data.frame(m)
d
m <- t(m)
d <- data.frame(m)
d
d <- t(d)
d
data.frame(c(1800,1500,3000,24,38,13))
a <-  data.frame(c(1800,1500,3000,24,38,13))
a
a <-  data.frame(c(1800,1500,3000),c(24,38,13))
a
colnames(a) <- c("사과","딸기","수박박")
rownames(a) <- c("사과","딸기","수박")
colnames(a) <- c("가격","판매량")
a
mean(a[,1])
mean(a[,2])
a <-  data.frame(c(1800,1500,3000),c(24,38,13),row.names = c("사과","딸기","수박"),colnames(c("가격","판매량")))
a <-  data.frame(c(1800,1500,3000),c(24,38,13),row.names = c("사과","딸기","수박"),colnames=c("가격","판매량"))
a <-  data.frame(c(1800,1500,3000),c(24,38,13),row.names = c("사과","딸기","수박"),col.names=c("가격","판매량"))
a <-  data.frame(c(1800,1500,3000),c(24,38,13),rownames = c("사과","딸기","수박"),colnames=c("가격","판매량"))
a <- data.frame(가격=c(1800,1500,3000),판매량=c(24,38,13),row.names("사과","딸기","수박"))
asd <- c("사과","딸기","수박")
a <- data.frame(가격=c(1800,1500,3000),판매량=c(24,38,13),row.names(asd))
a <- data.frame(가격=c(1800,1500,3000),판매량=c(24,38,13),row.names(asd[1:3]))
a <- data.frame("가격"=c(1800,1500,3000),"판매량"=c(24,38,13),row.names("사과","딸기","수박"))
a <- data.frame("가격"=c(1800,1500,3000),"판매량"=c(24,38,13),colnames("사과","딸기","수박"))
a <- data.frame("가격"=c(1800,1500,3000),"판매량"=c(24,38,13),`colnames<-`("사과","딸기","수박"))
a <- data.frame("가격"=c(1800,1500,3000),"판매량"=c(24,38,13))
a
a <-  data.frame(c(1800,1500,3000),c(24,38,13))
rownames(a) <- c("사과","딸기","수박")
a
a <- data.frame("가격"=c(1800,1500,3000),"판매량"=c(24,38,13))
a
rownames(a) <- c("사과","딸기","수박")
a
mean(a[,1])
mean(a[,2])
? data.frame
num <- 88
print("합격격")
print("합격")
print("불합격")
if(num>=90){
print("합격")
}else{
print("불합격")
}
if(num>=90){
print("수")
}else if(num>=80){
print("우")
}else{
print("again")
}
myv <- c(1:10)
for (i in myv) {
i
}
for (i in myv) {
print(i)
}
#1부터 10까지 합 구하기
a <-0
for(i in myv){
i <- a+i
}
print(i)
a <- a+i
for(i in myv){
a <- a+i
}
print(i)
for(i in myv){
a <- a+i
}
print(a)
#1부터 10까지 합 구하기 -ver2
myv2 <- c(1:100)
sum(myv2)
#csv는 기본 패키지로 사용 가능
#csv를 읽기
mdf = read.csv("csv_exam.csv")
mdf
#csv는 기본 패키지로 사용 가능
#csv를 읽기
mdf <-  read.csv("csv_exam.csv")
mdf
mdf[,2]
#dataframe에서 조건에 만족하는 데이터를 조회
m <- matrix(1:20,ncol = 4)
m
d <- data.frame(m)
d
myresult <- d[d$X3>=13,]
myresult
#조건에 만족하는 데이터를 result.csv파일로 저장
write.csv(myresult,file="result.scv")
#조건에 만족하는 데이터를 result.csv파일로 저장
write.csv(myresult,file="result.csv")
mdf
sc <- data.frame(mdf)
sc
exam <- sc[sc$science>=80,]
mytotal <- c("null","null",mean(exam$math),mean(exam$english),mean(exam$science))
?avg
myavg <- c("null","null",mean(exam$math),mean(exam$english),mean(exam$science))
mytotal <- c("null","null",sum(exam$math),sum(exam$english),sum(exam$science))
exam$mytotal <- mytotal
myavg
mytotal
exam
exam <- sc[sc$science>=80,,sc$mytotal$sum(exam$math,exam$english,exam$science)]
exam$mytotal <- sum(exam$math,exam$english,exam$science)
exam
exam$mytotal <- sum(c(exam$math,exam$english,exam$science)
exam$mytotal <- sum(c(exam$math,exam$english,exam$science))
exam$mytotal <- sum( c([exam$math,exam$english,exam$science],) )
exam$mytotal <- sum( c[exam$math,exam$english,exam$science], )
sum( c[exam$math,exam$english,exam$science], )
sum( c[exam$math,exam$english,exam$science] )
exam$mytotal <- sum( c[exam$math,exam$english,exam$science] )
exam$mytotal <- sum( [exam$math,exam$english,exam$science], )
exam$mytotal <- sum( c[exam$math,exam$english,exam$science], )
exam$mytotal <- sum( c(exam$math,exam$english,exam$science), )
exam$mytotal <- sum( c[(exam$math,exam$english,exam$science),] )
exam$mytotal <- sum( (exam$math,exam$english,exam$science) )
exam$mytotal <- sum (exam$math,exam$english,exam$science)
exam
exam <- sc[sc$science>=80,]
exam
dfdf <-  sum( c[exam$math,exam$english,exam$science] )
sum(exam[3:5])
sum(exam[3:5,])
sum(exam[,3:5])
exam[1,3:5]
sum(exam[1,3:5])
c(sum(exam[1,3:5]),sum(exam[2,3:5]),sum(exam[3,3:5]),sum(exam[4,3:5]))
c(mean(exam[1,3:5]),mean(exam[2,3:5]),mean(exam[3,3:5]),mean(exam[4,3:5]))
c(sum(exam[1,3:5]),sum(exam[2,3:5]),sum(exam[3,3:5]),sum(exam[4,3:5]))
c(mean(exam[1,3:5]),mean(exam[2,3:5]),mean(exam[3,3:5]),mean(exam[4,3:5]))
c(sum(exam[1,3:5]),sum(exam[2,3:5]),sum(exam[3,3:5]),sum(exam[4,3:5]))
mean(exam[1,3:5])
mean(c(exam[1,3:5]))
mean(c(exam[1,3:5],))
mean(exam[1,3:5])
exam[1,3:5]
mean(exam[1,3:5])
as.character(exam[1,3:5])
as.integer(exam[1,3:5])
mean(as.integer(exam[1,3:5]))
c(mean(as.integer(exam[1,3:5])),mean(as.integer(exam[2,3:5])),mean(as.integer(exam[3,3:5])),mean(as.integer(exam[4,3:5])))
mean(exam[1,3:5])
c(sum(exam[1,3:5]),sum(exam[2,3:5]),sum(exam[3,3:5]),sum(exam[4,3:5]))
exam$mytotal <- mytotal
mytotal <- c(sum(exam[1,3:5]),sum(exam[2,3:5]),sum(exam[3,3:5]),sum(exam[4,3:5]))
myavg <-  c(mean(as.integer(exam[1,3:5])),mean(as.integer(exam[2,3:5])),mean(as.integer(exam[3,3:5])),mean(as.integer(exam[4,3:5])))
exam$mytotal <- mytotal
exam$myavg <- myavg
exam
write.csv(exam,file="csv_exam_result.csv")
exam <- sc[sc$science>=80,]
exam
